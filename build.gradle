
buildscript {
    ext.cubaVersion = '6.10.0'
    repositories {
        
        mavenLocal()
        maven {
            url 'https://repo.cuba-platform.com/content/groups/work'
            credentials {
                username(rootProject.hasProperty('repoUser') ? rootProject['repoUser'] : 'cuba')
                password(rootProject.hasProperty('repoPass') ? rootProject['repoPass'] : 'cuba123')
            }
        }

    }
    dependencies {
        classpath "com.haulmont.gradle:cuba-plugin:$cubaVersion"
    }
}

def modulePrefix = 'cuba-jpa'

def globalModule = project(":${modulePrefix}-global")
def coreModule = project(":${modulePrefix}-core")

def servletApi = 'javax.servlet:javax.servlet-api:3.1.0'

apply(plugin: 'idea')
apply(plugin: 'cuba')

cuba {
    artifact {
        group = 'com.haulmont.cuba.jpa.repository'
        version = '0.1'
        isSnapshot = true
    }
    tomcat {
        dir = "$project.rootDir/deploy/tomcat"
    }
    ide {
        vcs = 'Git'
    }
}

dependencies {
    appComponent("com.haulmont.cuba:cuba-global:$cubaVersion")
}

def hsql = 'org.hsqldb:hsqldb:2.2.9'

configure([globalModule, coreModule]) {
    apply(plugin: 'java')
    apply(plugin: 'maven')
    apply(plugin: 'idea')
    apply(plugin: 'cuba')

    dependencies {
        testCompile('junit:junit:4.12')
    }

    sourceSets {
        test {
            java {
                include '**/company/**'
            }
        }
    }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }
}

configure(globalModule) {

    dependencies {
        compile(group: 'org.springframework.data', name: 'spring-data-commons', version: '1.13.13.RELEASE') {
            exclude(group: 'org.hibernate', module: 'hibernate-core')
            exclude(group: 'org.springframework', module: 'spring-context')
            exclude(group: 'org.springframework', module: 'spring-core')
            exclude(group: 'org.springframework', module: 'spring-beans')
            exclude(group: 'org.springframework', module: 'spring-tx')
            exclude(group: 'org.springframework', module: 'spring-orm')
            exclude(group: 'org.springframework', module: 'spring-aop')
            exclude(group: 'org.springframework', module: 'spring-expression')
        }
    }

    task enhance(type: CubaEnhancing)

}

configure(coreModule) {

    configurations {
        jdbc
        dbscripts
    }

    dependencies {
        compile(globalModule)
        provided(servletApi)
        jdbc(hsql)
        testRuntime(hsql)
    }

    entitiesEnhancing {
        test {
            enabled = true
        }
    }

    task cleanConf(description: 'Cleans up conf directory') {
        doLast {
            def dir = new File(cuba.tomcat.dir, "/conf/${modulePrefix}-core")
            if (dir.isDirectory()) {
                ant.delete(includeemptydirs: true) {
                    fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
                }
            }
        }
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = "${modulePrefix}-core"
        appJars(modulePrefix + '-global', modulePrefix + '-core')
    }

    task startDb(type: CubaHsqlStart) {
        dbName = 'sample'
    }

    task createDb(dependsOn: assembleDbScripts, description: 'Creates local database', type: CubaDbCreation) {
        dbms = 'hsql'
        host = 'localhost'
        dbName = 'sample'
        dbUser = 'sa'
        dbPassword = ''
    }

    task updateDb(dependsOn: assembleDbScripts, description: 'Updates local database', type: CubaDbUpdate) {
        dbms = 'hsql'
        host = 'localhost'
        dbName = 'sample'
        dbUser = 'sa'
        dbPassword = ''
    }
}

task restart(dependsOn: ['stop', ":${modulePrefix}-core:deploy"], description: 'Redeploys applications and restarts local Tomcat') {
    doLast {
        ant.waitfor(maxwait: 6, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
            not {
                socket(server: 'localhost', port: '8787')
            }
        }
        start.execute()
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.3.1'
}
